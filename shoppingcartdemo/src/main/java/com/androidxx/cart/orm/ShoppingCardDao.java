package com.androidxx.cart.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.androidxx.cart.orm.ShoppingCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOPPING_CARD".
*/
public class ShoppingCardDao extends AbstractDao<ShoppingCard, Long> {

    public static final String TABLENAME = "SHOPPING_CARD";

    /**
     * Properties of entity ShoppingCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductName = new Property(1, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductPrice = new Property(2, Float.class, "productPrice", false, "PRODUCT_PRICE");
        public final static Property ProductNum = new Property(3, Integer.class, "productNum", false, "PRODUCT_NUM");
        public final static Property ProductId = new Property(4, Long.class, "productId", false, "PRODUCT_ID");
    };


    public ShoppingCardDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOPPING_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_NAME\" TEXT," + // 1: productName
                "\"PRODUCT_PRICE\" REAL," + // 2: productPrice
                "\"PRODUCT_NUM\" INTEGER," + // 3: productNum
                "\"PRODUCT_ID\" INTEGER);"); // 4: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOPPING_CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShoppingCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(2, productName);
        }
 
        Float productPrice = entity.getProductPrice();
        if (productPrice != null) {
            stmt.bindDouble(3, productPrice);
        }
 
        Integer productNum = entity.getProductNum();
        if (productNum != null) {
            stmt.bindLong(4, productNum);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(5, productId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShoppingCard readEntity(Cursor cursor, int offset) {
        ShoppingCard entity = new ShoppingCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productName
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // productPrice
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // productNum
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShoppingCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductPrice(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setProductNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setProductId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShoppingCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShoppingCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
